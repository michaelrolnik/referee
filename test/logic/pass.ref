data    a:  boolean;
data    b:  boolean;
data    c:  boolean;
data    d:  boolean;
data    e:  boolean;
data    f:  boolean;
data    g:  boolean;
data    h:  boolean;
data    i:  boolean;
data    j:  boolean;
data    k:  boolean;
data    l:  boolean;
data    m:  boolean;
data    n:  boolean;
data    o:  boolean;
data    p:  boolean;
data    q:  boolean;
data    r:  boolean;
data    s:  boolean;
data    t:  boolean;
data    u:  boolean;
data    v:  boolean;
data    w:  boolean;
data    x:  boolean;
data    y:  boolean;
data    z:  boolean;

conf    C:  struct {
    i:  integer;
    b:  boolean;
    n:  number;
    s:  string;
};

a == true;
b == false;
Xs(a == false);
Xw(a == false);
Xs(b == true);
Xw(b == true);
F(a == true);
Xs(F(a == true)) == false;
F(b == true);
G(a == true) == false;
G(a == false) == false;
Xs(G(a == false));
Xs(G(!a));
G(true);
F(z);
G(z => Xw(a));
G(z => !Xs(a));
Ys(true) == false;
Yw(false) == true;
Xs( 0, a) == true;
Xs( 1, b) == true;
Xs(25, z) == true;
Xs(26, z) == false;
Xw(26, z) == true;
Xs(26, true) == false;
Xw(26, false) == true;

beg@(F(z && beg.a));

I(a, 1) == 1000;
I(a, 2) == 2000;
I(b, 2) == 2000;
I(c || f, 2) == 4000;
I(z, 1) == 1;
I(true, 1) == 25001;
I(false, 1) == 0;
Xs(I(true, 1) == 24001);

I[0:500](a, 1) == 500;
I[1:500](a, 1) == 499;
I[1000:1002](a || b, 1) == 2;
I[0:500](a, 1.1) == 550;

G[100:1000](a);
G[100:1001](a) == false;
G[100:1001](a || b);
F[0:25000](z) == false;
F[0:25001](z) == true;
F[25000:25001](z) == true;
Us(a, b);
Us[100:1000](a, b) == false;
Uw[100:1000](a, b);
Us[100:1001](a, b);
Xs(Us(a, b));
Xs(25, G(z));
Xs(25, F(z));
O(a);
G(z => O(a));
G(z => O[0:3000](x));
Xs(25, O[0:2000](x)) == false;
Xs(25, O[0:2001](x));

G(C.i == 1);
G(C.n == 1.1);
G(C.b == true);
G(C.s == "hello");
C.s != "hello?";
-C.i == 1 - 2;

1 - 2 == -1;

a && b == false;
a ^ b == true;

F(z && Ys(H(!z)));
F(z && Ys(F(!z)));
F(z && Ys(Ss(!z, a)));
F(z && Ys(Sw(!z, a)));

after b, it is never the case that a holds;
before b, it is always the case that a holds;

after b, before c, it is always the case that b holds;
after b, before c, it is never the case that a holds;

after a until c, it is always the case that a || b holds;
between a and c, it is always the case that a || b holds;

while z, it is always the case that z holds;

globally, z eventually holds;
globally, if a, then in response c eventually holds;
globally, if a, then in response c followed by e eventually holds;
globally, if a followed by c, then in response e eventually holds;
globally, if e holds, then it must have been the case that d has occurred before it;
globally, if b and afterwards c holds, then it must have been the case that a has occurred before it;
globally, if c holds, then it must have been the case that a and afterwards b have occurred before it;
globally, !z holds without interruption until z holds;
globally, if a has occurred, then in response !a holds continually after 1000 nanoseconds;

7 % 2 == 1; 
8 % 3 == 2; 
-8 % 3 == 2; 

!Us(a, b) == Rw(!a, !b);
!Uw(a, b) == Rs(!a, !b);
!Ss(a, b) == Tw(!a, !b);
!Sw(a, b) == Ts(!a, !b);

!Us(a, b) <=> Rw(!a, !b);
!Uw(a, b) <=> Rs(!a, !b);
!Ss(a, b) <=> Tw(!a, !b);
!Sw(a, b) <=> Ts(!a, !b);

!Rs(a, b) == Uw(!a, !b);
!Rw(a, b) == Us(!a, !b);
!Ts(a, b) == Sw(!a, !b);
!Tw(a, b) == Ss(!a, !b);

!Rs(a, b) <=> Uw(!a, !b);
!Rw(a, b) <=> Us(!a, !b);
!Ts(a, b) <=> Sw(!a, !b);
!Tw(a, b) <=> Ss(!a, !b);

!Xs(a) <=> Xw(!a);
!Xw(a) <=> Xs(!a);
!Ys(a) <=> Yw(!a);
!Yw(a) <=> Ys(!a);

!F(a)   <=> G(!a);
!G(a)   <=> F(!a);
!O(a)   <=> H(!a);
!H(a)   <=> O(!a);

!(a && b) <=> !a || !b;
!(a || b) <=> !a && !b;

!(2 <  1) <=> (2 >= 1);
!(2 <= 1) <=> (2 >  1);
!(1 >  2) <=> (1 <= 2);
!(1 >= 2) <=> (1 <  2);
!(1 == 2) <=> (1 != 2);
!(1 != 1) <=> (1 == 1);

1   < 2;
1.1 < 2.2;
1.1 < 2;
1   < 2.2;

1   <= 2;
1.1 <= 2.2;
1.1 <= 2;
1   <= 2.2;

1   <= 1;
1   <= 1.0;
1.0 <= 1;
1.0 <= 1.0;

1   >= 1;
1   >= 1.0;
1.0 >= 1;
1.0 >= 1.0;

2   >= 1;
2   >= 1.0;
2.0 >= 1;
2.0 >= 1.0;

2   >  1;
2   >  1.0;
2.0 >  1;
2.0 >  1.0;

0   + 0     == 0;
0   + 0     == 0.0;
0.0 + 0.0   == 0;
0.0 + 0.0   == 0.0;
0.0 + 0     == 0.0;
0.0 + 0     == 0;
0   + 0.0   == 0;
0   + 0.0   == 0.0;

0   - 0     == 0;
0   - 0     == 0.0;
0.0 - 0.0   == 0;
0.0 - 0.0   == 0.0;
0.0 - 0     == 0.0;
0.0 - 0     == 0;
0   - 0.0   == 0;
0   - 0.0   == 0.0;

1   * 1     == 1;
1   * 1     == 1.0;
1   * 1.0   == 1;
1   * 1.0   == 1.0;
1.0 * 1     == 1;
1.0 * 1     == 1.0;
1.0 * 1.0   == 1;
1.0 * 1.    == 1.0;

(1   / 1  ) == 1;
(1   / 1  ) == 1.0;
(1   / 1.0) == 1;
(1   / 1.0) == 1.0;
(1.0 / 1.0) == 1;
(1.0 / 1.0) == 1.0;

(true ? true : false) == true;
(false ? false : true) == true;
(true ? "true" : "false") == "true";
(true ? 1 : 2) == 1;
(true ? 1.0 : 2) == 1.0;
(true ? 1.0 : 2.0) == 1;
(true ? 1 : 2.0) == 1;
